[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": ".",
    "section": "",
    "text": "Preface\nThis is a Quarto book.\nTo learn more about Quarto books visit https://quarto.org/docs/books."
  },
  {
    "objectID": "intro.html",
    "href": "intro.html",
    "title": "1  Introduction",
    "section": "",
    "text": "This is a book created from markdown and executable code.\nSee Knuth (1984) for additional discussion of literate programming.\n\n\n\n\nKnuth, Donald E. 1984. “Literate Programming.” Comput. J. 27 (2): 97–111. https://doi.org/10.1093/comjnl/27.2.97."
  },
  {
    "objectID": "sine_wave.html",
    "href": "sine_wave.html",
    "title": "2  Shinylive in Quarto example",
    "section": "",
    "text": "This is a Shinylive application embedded in a Quarto doc.\n#| standalone: true\n\nfrom shiny import *\n\napp_ui = ui.page_fluid(\n    ui.input_slider(\"n\", \"N\", 0, 100, 40),\n    ui.output_text_verbatim(\"txt\"),\n)\n\ndef server(input, output, session):\n    @output\n    @render.text\n    def txt():\n        return f\"The value of n*2 is {input.n() * 2}\"\n\napp = App(app_ui, server)"
  },
  {
    "objectID": "summary.html",
    "href": "summary.html",
    "title": "3  Summary",
    "section": "",
    "text": "In summary, this book has no content whatsoever."
  },
  {
    "objectID": "references.html",
    "href": "references.html",
    "title": "References",
    "section": "",
    "text": "Knuth, Donald E. 1984. “Literate Programming.” Comput.\nJ. 27 (2): 97–111. https://doi.org/10.1093/comjnl/27.2.97."
  },
  {
    "objectID": "Convolutional_Neural_Networks.html#contenidos",
    "href": "Convolutional_Neural_Networks.html#contenidos",
    "title": "1  Redes neuronales convolucionales: paso a paso",
    "section": "2.1 Contenidos",
    "text": "2.1 Contenidos\n\n1 - Librerías\n2 - Convolutional Neural Networks\n\n2.1 - Zero-Padding\n\nExercise 1 - zero_pad\n\n2.2 - Single Step of Convolution\n\nExercise 2 - conv_single_step\n\n2.3 - Convolutional Neural Networks - Forward Pass\n\nExercise 3 - conv_forward"
  },
  {
    "objectID": "Convolutional_Neural_Networks.html#librerías",
    "href": "Convolutional_Neural_Networks.html#librerías",
    "title": "1  Redes neuronales convolucionales: paso a paso",
    "section": "1.1 Librerías",
    "text": "1.1 Librerías\n\n\nCode\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\n%matplotlib inline\nplt.rcParams['figure.figsize'] = (5.0, 4.0) # set default size of plots\nplt.rcParams['image.interpolation'] = 'nearest'\nplt.rcParams['image.cmap'] = 'gray'\n\n\nnp.random.seed(1)"
  },
  {
    "objectID": "Convolutional_Neural_Networks.html#convolutional-neural-networks",
    "href": "Convolutional_Neural_Networks.html#convolutional-neural-networks",
    "title": "1  Redes neuronales convolucionales: paso a paso",
    "section": "2.3 2 - Convolutional Neural Networks",
    "text": "2.3 2 - Convolutional Neural Networks\nUna capa de convolución transforma un volumen de entrada en un volumen de salida de tamaño diferente, como se muestra a continuación:\n\n\n\nEn esta parte, se construirán todos los pasos de la capa de convolución. Se comenzará implementando dos funciones auxiliares: una para el zero-padding y otra para calcular la función de convolución en sí.\n\n\n2.3.1 2.1 - Zero-Padding\n\n\n\n\n Figure 1:  Zero-Padding Image (3 channels, RGB) with a padding of 2.\n\n\n\nLos principales beneficios del padding son:\nPermite utilizar una capa CONV sin reducir necesariamente la altura y el ancho de los volúmenes. Esto es importante para construir redes más profundas, ya que de lo contrario, la altura y el ancho disminuirían al avanzar hacia capas más profundas. Un caso especial importante es la convolución “same”, en la que la altura y el ancho se preservan exactamente después de una capa.\nAyuda a conservar más información en el borde de una imagen. Sin relleno, muy pocos valores en la capa siguiente se verían afectados por los píxeles en los bordes de una imagen.\n\n\n\n2.3.2 Ejercicio 1 - zero_pad\nSe debe implementar la siguiente función, que añade zero-padding a todas las imágenes de un batch de ejemplos X.\nPor ejemplo, si se desea añadir un relleno de pad = 1 para la segunda dimensión, pad = 3 para la cuarta dimensión y pad = 0 para el resto a un array “a” de forma \\((5,5,5,5,5)\\), se haría de la siguiente manera:\na = np.pad(a, ((0,0), (1,1), (0,0), (3,3), (0,0)), mode='constant', constant_values = (0,0))\n\n\nCode\ndef zero_pad(X, pad):\n    \"\"\"\n    Pad with zeros all images of the dataset X. The padding is applied to the height and width of an image, \n    as illustrated in Figure 1.\n    \n    Argument:\n    X -- python numpy array of shape (m, n_H, n_W, n_C) representing a batch of m images\n    pad -- integer, amount of padding around each image on vertical and horizontal dimensions\n    \n    Returns:\n    X_pad -- padded image of shape (m, n_H + 2 * pad, n_W + 2 * pad, n_C)\n    \"\"\"\n    \n    X_pad = np.pad(X,((0,0),(pad,pad),(pad,pad),(0,0)))\n      \n    return X_pad\n\n\n\n\nCode\n# genero vector de números aleatorios (4 matrices de 3x3 con 2 canales)\nx = np.random.randn(4, 3, 3, 2)\n\n# le añado el padding (El tamaño del relleno es 3, lo que significa que se añaden 3 filas/columnas de ceros alrededor de cada matriz)\nx_pad = zero_pad(x, 3)\n\nprint (f\"Dimensiones del vector x: \\t{x.shape}\")\nprint (f\"Dimensiones del vector x_pad: \\t{x.shape}\")\n\nprint (\"\\nContenido de x[1,1] =\\n\", x[1, 1])\nprint (\"\\nContenido de x_pad[1,1] =\\n\", x_pad[1, 1])\n\nfig, axarr = plt.subplots(1, 2)\naxarr[0].set_title('x')\naxarr[0].imshow(x[0, :, :, 0])\naxarr[1].set_title('x_pad')\naxarr[1].imshow(x_pad[0, :, :, 0])\nplt.show()\n\n\nDimensiones del vector x:   (4, 3, 3, 2)\nDimensiones del vector x_pad:   (4, 3, 3, 2)\n\nContenido de x[1,1] =\n [[ 0.90085595 -0.68372786]\n [-0.12289023 -0.93576943]\n [-0.26788808  0.53035547]]\n\nContenido de x_pad[1,1] =\n [[0. 0.]\n [0. 0.]\n [0. 0.]\n [0. 0.]\n [0. 0.]\n [0. 0.]\n [0. 0.]\n [0. 0.]\n [0. 0.]]\n\n\n\n\n\n\n\nCode\nx[1,:,:,:]\n\n\narray([[[ 0.04221375,  0.58281521],\n        [-1.10061918,  1.14472371],\n        [ 0.90159072,  0.50249434]],\n\n       [[ 0.90085595, -0.68372786],\n        [-0.12289023, -0.93576943],\n        [-0.26788808,  0.53035547]],\n\n       [[-0.69166075, -0.39675353],\n        [-0.6871727 , -0.84520564],\n        [-0.67124613, -0.0126646 ]]])\n\n\n\n\n\n2.3.3 2.2 - Un solo paso de la convolución\nEn esta parte, se implementará un solo paso de la convolución, en el cual se aplciará el filtro a una única posición de la entrada. Esto se utilizará para construir una unidad convolucional, que:\n\nToma un volumen de entrada\nAplica un filtro en cada posición de la entrada\nProduce otro volumen (generalmente de tamaño diferente)\n\n\n\n\n\n Figura 2:  Operación de convolución Operación de convolución con un filtro de 3x3 y un paso de 1 (el paso es la cantidad que mueves la ventana cada vez que la deslizas)\n\n\n\nEn una aplicación de computer vision, cada valor en la matriz de la izquierda corresponde a un solo valor de píxel. Se convoluciona un filtro de 3x3 con la imagen multiplicando sus valores elemento a elemento (element-wise) con la matriz original, luego sumándolos y añadiendo un sesgo (bias). En este primer paso, se implementa un solo paso de la convolución, correspondiente a aplicar un filtro a solo una de las posiciones para obtener una única salida de valor real.\n\n\n\n2.3.4 Ejercicio 2 - conv_single_step\nImplementa conv_single_step().\n\n\nCode\ndef conv_single_step(a_slice_prev, W, b):\n    \"\"\"\n    Apply one filter defined by parameters W on a single slice (a_slice_prev) of the output activation \n    of the previous layer.\n    \n    Arguments:\n    a_slice_prev -- slice of input data of shape (f, f, n_C_prev)\n    W -- Weight parameters contained in a window - matrix of shape (f, f, n_C_prev)\n    b -- Bias parameters contained in a window - matrix of shape (1, 1, 1)\n    \n    Returns:\n    Z -- a scalar value, the result of convolving the sliding window (W, b) on a slice x of the input data\n    \"\"\"\n\n    # Element-wise product between a_slice_prev and W. Do not add the bias yet.\n    s = np.multiply(a_slice_prev,W)\n    # Sum over all entries of the volume s.\n    Z = np.sum(s)\n    # Add bias b to Z. Cast b to a float() so that Z results in a scalar value.\n    b = np.squeeze(b)\n    Z = Z + b\n    \n    return Z\n\n\n\n\nCode\na_slice_prev = np.random.randn(4, 4, 3)\nW = np.random.randn(4, 4, 3)\nb = np.random.randn(1, 1, 1)\n\nZ = conv_single_step(a_slice_prev, W, b)\nprint(\"Z =\", Z)\n\n\nZ = 0.35608282827551285\n\n\n\n\n\n2.3.5 2.3 - Convolutional Neural Networks - Forward Pass\nEn el forward pass, se convolucionan múltiples filtros sobre la entrada. Cada ‘convolución’ proporciona una salida en forma de matriz 2D. Estas salidas se apilan para obtener un volumen 3D:\n\n\n\n\n\n\n\n2.3.6 Exercise 3 - conv_forward\nSe implementará la función a continuación para convolucionar los filtros W sobre una activación de entrada A_prev. Esta función toma los siguientes parámetros:\n\nA_prev, las activaciones producidas por la capa anterior (para un batc de \\(m\\) entradas);\nLos pesos se denotan con W. El tamaño de la ventana del filtro es \\(f x f\\) .\nEl vector de sesgo es b, donde cada filtro tiene su propio sesgo (único). También se tiene acceso al diccionario de hiperparámetros, que contiene el paso (stride) y el relleno (padding).\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nHint: 1. Para seleccionar una porción 2x2 en la esquina superior izquierda de una matriz “a_prev” (de forma (5,5,3)), se haría:\na_slice_prev = a_prev[0:2,0:2,:]\nNotese cómo esto da una porción 3D que tiene altura 2, ancho 2 y profundidad 3. La profundidad es el número de canales.\nEsto será útil cuando se defina a_slice_prev a continuación, utilizando los índices start/end que se definirán.\n\nPara definir a_slice se necesitará primero definir sus esquinas vert_start, vert_end, horiz_start y horiz_end. La siguiente figura puede ser útil para descubrir cómo cada una de las esquinas puede ser definida usando \\(h\\), \\(w\\), \\(f\\) y \\(s\\) en el código a continuación.\n\n\n\n\n\n Figura 3:  Definition of a slice using vertical and horizontal start/end (with a 2x2 filter)  This figure shows only a single channel.\n\n\n\n\nReminder:\nLas fórmulas que relacionan la forma de salida de la convolución con la forma de entrada son:\n\\[n_H = \\Bigl\\lfloor \\frac{n_{H_{prev}} - f + 2 \\times pad}{stride} \\Bigr\\rfloor +1\\] \\[n_W = \\Bigl\\lfloor \\frac{n_{W_{prev}} - f + 2 \\times pad}{stride} \\Bigr\\rfloor +1\\] \\[n_C = \\text{número de filtros en la convolución}\\]\n\n\n\nPara este ejercicio se implementará todo con bucles for.\n\n\nCode\ndef conv_forward(A_prev, W, b, hparameters):\n    \"\"\"\n    Implements the forward propagation for a convolution function\n    \n    Arguments:\n    A_prev -- output activations of the previous layer, \n        numpy array of shape (m, n_H_prev, n_W_prev, n_C_prev)\n    W -- Weights, numpy array of shape (f, f, n_C_prev, n_C)\n    b -- Biases, numpy array of shape (1, 1, 1, n_C)\n    hparameters -- python dictionary containing \"stride\" and \"pad\"\n        \n    Returns:\n    Z -- conv output, numpy array of shape (m, n_H, n_W, n_C)\n    cache -- cache of values needed for the conv_backward() function\n    \"\"\"\n    \n    # Retrieve dimensions from A_prev's shape (≈1 line)  \n    (m, n_H_prev, n_W_prev, n_C_prev) = A_prev.shape\n    \n    # Retrieve dimensions from W's shape (≈1 line)\n    (f, f, n_C_prev, n_C) = W.shape\n    \n    # Retrieve information from \"hparameters\" (≈2 lines)\n    stride = hparameters[\"stride\"]\n    pad = hparameters[\"pad\"]\n    \n    # Compute the dimensions of the CONV output volume using the formula given above. \n    # Hint: use int() to apply the 'floor' operation. (≈2 lines)\n    n_H = int((n_H_prev + 2*pad - f)/stride) + 1\n    n_W = int((n_W_prev + 2*pad - f)/stride) + 1\n    \n    # Initialize the output volume Z with zeros. (≈1 line)\n    Z = np.zeros((m, n_H, n_W, n_C))\n    \n    # Create A_prev_pad by padding A_prev\n    A_prev_pad = zero_pad(A_prev, pad)\n    \n    for i in range(m):               # loop over the batch of training examples\n        a_prev_pad = A_prev_pad[i]          # Select ith training example's padded activation\n        for h in range(n_H):           # loop over vertical axis of the output volume\n            # Find the vertical start and end of the current \"slice\" (≈2 lines)\n            vert_start = stride * h \n            vert_end = vert_start  + f\n            \n            for w in range(n_W):       # loop over horizontal axis of the output volume\n                # Find the horizontal start and end of the current \"slice\" (≈2 lines)\n                horiz_start = stride * w\n                horiz_end = horiz_start + f\n                \n                for c in range(n_C):   # loop over channels (= #filters) of the output volume\n                                        \n                    # Use the corners to define the (3D) slice of a_prev_pad (See Hint above the cell). (≈1 line)\n                    a_slice_prev = a_prev_pad[vert_start:vert_end,horiz_start:horiz_end,:]\n                    \n                    # Convolve the (3D) slice with the correct filter W and bias b, to get back one output neuron. (≈3 line)\n                    weights = W[:, :, :, c]\n                    biases  = b[:, :, :, c]\n                    Z[i, h, w, c] = conv_single_step(a_slice_prev, weights, biases)\n    \n    # Save information in \"cache\" for the backprop\n    cache = (A_prev, W, b, hparameters)\n    \n    return Z, cache\n\n\n\n\nCode\nnp.random.seed(1)\nA_prev = np.random.randn(2, 5, 7, 4)\nW = np.random.randn(3, 3, 4, 8)\nb = np.random.randn(1, 1, 1, 8)\nhparameters = {\"pad\" : 1,\n               \"stride\": 2}\n\nZ, cache_conv = conv_forward(A_prev, W, b, hparameters)\nprint(\"\\nZ's mean =\\t\", np.mean(Z))\nprint(\"\\nZ[0,2,1] =\\n\", Z[0, 2, 1])\nprint(\"\\ncache_conv[0][1][2][3] =\\n\", cache_conv[0][1][2][3])\n\n\n\nZ's mean =   0.5511276474566768\n\nZ[0,2,1] =\n [-2.17796037  8.07171329 -0.5772704   3.36286738  4.48113645 -2.89198428\n 10.99288867  3.03171932]\n\ncache_conv[0][1][2][3] =\n [-1.1191154   1.9560789  -0.3264995  -1.34267579]"
  },
  {
    "objectID": "Convolutional_Neural_Networks.html",
    "href": "Convolutional_Neural_Networks.html",
    "title": "1  Redes neuronales convolucionales: paso a paso",
    "section": "",
    "text": "2 Convolutional Neural Networks\nUna capa de convolución transforma un volumen de entrada en un volumen de salida de tamaño diferente, como se muestra a continuación:\nEn esta parte, se construirán todos los pasos de la capa de convolución. Se comenzará implementando dos funciones auxiliares: una para el zero-padding y otra para calcular la función de convolución en sí.\nLa capa de pooling (POOL) reduce la altura y el ancho de la entrada. Contribuye a la reducción del cálculo, así como a la invariancia de los detectores de características frente a su posición en la entrada. Existen dos tipos de capas de pooling:\nEstas cpasa de pooling no tienen parámetros que entrenar durante el backpropagation, pero si tienen hiperparámetros como el window size \\(f\\), que especifica la altura y ancho de la ventana \\(f \\times f\\) sobre la cual se calcula el máximo o el promedio (max o average).\nEn los frameworks de deep learning, solo se necesita implementar el forward pass, y el framework se encarga del backpropagation, por lo que la mayoría de los ingenieros de deep learning no necesitan preocuparse por susdetalles.\nCuando se implementa una red neuronal simple (fully-connected), se utiliza la retropropagación para calcular las derivadas con respecto al loss para actualizar los parámetros. De manera similar, en las redes neuronales convolucionales se pueden calcular las derivadas con respecto al costo para actualizar los parámetros. Las ecuaciones de retropropagación se presentan brevemente a continuación."
  },
  {
    "objectID": "Convolutional_Neural_Networks.html#zero-padding",
    "href": "Convolutional_Neural_Networks.html#zero-padding",
    "title": "1  Redes neuronales convolucionales: paso a paso",
    "section": "2.1 Zero-Padding",
    "text": "2.1 Zero-Padding\n\n\n\n\n Figure 1:  Zero-Padding Image (3 channels, RGB) with a padding of 2.\n\n\n\nLos principales beneficios del padding son:\nPermite utilizar una capa CONV sin reducir necesariamente la altura y el ancho de los volúmenes. Esto es importante para construir redes más profundas, ya que de lo contrario, la altura y el ancho disminuirían al avanzar hacia capas más profundas. Un caso especial importante es la convolución “same”, en la que la altura y el ancho se preservan exactamente después de una capa.\nAyuda a conservar más información en el borde de una imagen. Sin relleno, muy pocos valores en la capa siguiente se verían afectados por los píxeles en los bordes de una imagen.\n\n\n2.1.1 Ejercicio 1 - zero_pad\nSe debe implementar la siguiente función, que añade zero-padding a todas las imágenes de un batch de ejemplos X.\nPor ejemplo, si se desea añadir un relleno de pad = 1 para la segunda dimensión, pad = 3 para la cuarta dimensión y pad = 0 para el resto a un array “a” de forma \\((5,5,5,5,5)\\), se haría de la siguiente manera:\na = np.pad(a, ((0,0), (1,1), (0,0), (3,3), (0,0)), mode='constant', constant_values = (0,0))\n\n\nCode\ndef zero_pad(X, pad):\n    \"\"\"\n    Pad with zeros all images of the dataset X. The padding is applied to the height and width of an image, \n    as illustrated in Figure 1.\n    \n    Argument:\n    X -- python numpy array of shape (m, n_H, n_W, n_C) representing a batch of m images\n    pad -- integer, amount of padding around each image on vertical and horizontal dimensions\n    \n    Returns:\n    X_pad -- padded image of shape (m, n_H + 2 * pad, n_W + 2 * pad, n_C)\n    \"\"\"\n    \n    X_pad = np.pad(X,((0,0),(pad,pad),(pad,pad),(0,0)))\n      \n    return X_pad\n\n\n\n\nCode\n# genero vector de números aleatorios (4 matrices de 3x3 con 2 canales)\nx = np.random.randn(4, 3, 3, 2)\n\n# le añado el padding (El tamaño del relleno es 3, lo que significa que se añaden 3 filas/columnas de ceros alrededor de cada matriz)\nx_pad = zero_pad(x, 3)\n\nprint (f\"Dimensiones del vector x: \\t{x.shape}\")\nprint (f\"Dimensiones del vector x_pad: \\t{x.shape}\")\n\nprint (\"\\nContenido de x[1,1] =\\n\", x[1, 1])\nprint (\"\\nContenido de x_pad[1,1] =\\n\", x_pad[1, 1])\n\nfig, axarr = plt.subplots(1, 2)\naxarr[0].set_title('x')\naxarr[0].imshow(x[0, :, :, 0])\naxarr[1].set_title('x_pad')\naxarr[1].imshow(x_pad[0, :, :, 0])\nplt.show()\n\n\nDimensiones del vector x:   (4, 3, 3, 2)\nDimensiones del vector x_pad:   (4, 3, 3, 2)\n\nContenido de x[1,1] =\n [[ 0.90085595 -0.68372786]\n [-0.12289023 -0.93576943]\n [-0.26788808  0.53035547]]\n\nContenido de x_pad[1,1] =\n [[0. 0.]\n [0. 0.]\n [0. 0.]\n [0. 0.]\n [0. 0.]\n [0. 0.]\n [0. 0.]\n [0. 0.]\n [0. 0.]]\n\n\n\n\n\n\n\nCode\nx[1,:,:,:]\n\n\narray([[[ 0.04221375,  0.58281521],\n        [-1.10061918,  1.14472371],\n        [ 0.90159072,  0.50249434]],\n\n       [[ 0.90085595, -0.68372786],\n        [-0.12289023, -0.93576943],\n        [-0.26788808,  0.53035547]],\n\n       [[-0.69166075, -0.39675353],\n        [-0.6871727 , -0.84520564],\n        [-0.67124613, -0.0126646 ]]])"
  },
  {
    "objectID": "Convolutional_Neural_Networks.html#un-solo-paso-de-la-convolución",
    "href": "Convolutional_Neural_Networks.html#un-solo-paso-de-la-convolución",
    "title": "1  Redes neuronales convolucionales: paso a paso",
    "section": "2.2 Un solo paso de la convolución",
    "text": "2.2 Un solo paso de la convolución\nEn esta parte, se implementará un solo paso de la convolución, en el cual se aplciará el filtro a una única posición de la entrada. Esto se utilizará para construir una unidad convolucional, que:\n\nToma un volumen de entrada\nAplica un filtro en cada posición de la entrada\nProduce otro volumen (generalmente de tamaño diferente)\n\n\n\n\n\n Figura 2:  Operación de convolución Operación de convolución con un filtro de 3x3 y un paso de 1 (el paso es la cantidad que mueves la ventana cada vez que la deslizas)\n\n\n\nEn una aplicación de computer vision, cada valor en la matriz de la izquierda corresponde a un solo valor de píxel. Se convoluciona un filtro de 3x3 con la imagen multiplicando sus valores elemento a elemento (element-wise) con la matriz original, luego sumándolos y añadiendo un sesgo (bias). En este primer paso, se implementa un solo paso de la convolución, correspondiente a aplicar un filtro a solo una de las posiciones para obtener una única salida de valor real.\n\n\n2.2.1 Ejercicio 2 - conv_single_step\nImplementa conv_single_step().\n\n\nCode\ndef conv_single_step(a_slice_prev, W, b):\n    \"\"\"\n    Apply one filter defined by parameters W on a single slice (a_slice_prev) of the output activation \n    of the previous layer.\n    \n    Arguments:\n    a_slice_prev -- slice of input data of shape (f, f, n_C_prev)\n    W -- Weight parameters contained in a window - matrix of shape (f, f, n_C_prev)\n    b -- Bias parameters contained in a window - matrix of shape (1, 1, 1)\n    \n    Returns:\n    Z -- a scalar value, the result of convolving the sliding window (W, b) on a slice x of the input data\n    \"\"\"\n\n    # Element-wise product between a_slice_prev and W. Do not add the bias yet.\n    s = np.multiply(a_slice_prev,W)\n    # Sum over all entries of the volume s.\n    Z = np.sum(s)\n    # Add bias b to Z. Cast b to a float() so that Z results in a scalar value.\n    b = np.squeeze(b)\n    Z = Z + b\n    \n    return Z\n\n\n\n\nCode\na_slice_prev = np.random.randn(4, 4, 3)\nW = np.random.randn(4, 4, 3)\nb = np.random.randn(1, 1, 1)\n\nZ = conv_single_step(a_slice_prev, W, b)\nprint(\"Z =\", Z)\n\n\nZ = 0.35608282827551285"
  },
  {
    "objectID": "Convolutional_Neural_Networks.html#forward-pass",
    "href": "Convolutional_Neural_Networks.html#forward-pass",
    "title": "1  Redes neuronales convolucionales: paso a paso",
    "section": "2.3 Forward Pass",
    "text": "2.3 Forward Pass\nEn el forward pass, se convolucionan múltiples filtros sobre la entrada. Cada ‘convolución’ proporciona una salida en forma de matriz 2D. Estas salidas se apilan para obtener un volumen 3D:\n\n\n\n\n\n\n2.3.1 Exercise 3 - conv_forward\nSe implementará la función a continuación para convolucionar los filtros W sobre una activación de entrada A_prev. Esta función toma los siguientes parámetros:\n\nA_prev, las activaciones producidas por la capa anterior (para un batc de \\(m\\) entradas);\nLos pesos se denotan con W. El tamaño de la ventana del filtro es \\(f x f\\) .\nEl vector de sesgo es b, donde cada filtro tiene su propio sesgo (único). También se tiene acceso al diccionario de hiperparámetros, que contiene el paso (stride) y el relleno (padding).\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nHint: 1. Para seleccionar una porción 2x2 en la esquina superior izquierda de una matriz “a_prev” (de forma (5,5,3)), se haría:\na_slice_prev = a_prev[0:2,0:2,:]\nNotese cómo esto da una porción 3D que tiene altura 2, ancho 2 y profundidad 3. La profundidad es el número de canales.\nEsto será útil cuando se defina a_slice_prev a continuación, utilizando los índices start/end que se definirán.\n\nPara definir a_slice se necesitará primero definir sus esquinas vert_start, vert_end, horiz_start y horiz_end. La siguiente figura puede ser útil para descubrir cómo cada una de las esquinas puede ser definida usando \\(h\\), \\(w\\), \\(f\\) y \\(s\\) en el código a continuación.\n\n\n\n\n\n Figura 3:  Definition of a slice using vertical and horizontal start/end (with a 2x2 filter)  This figure shows only a single channel.\n\n\n\n\nReminder:\nLas fórmulas que relacionan la forma de salida de la convolución con la forma de entrada son:\n\\[n_H = \\Bigl\\lfloor \\frac{n_{H_{prev}} - f + 2 \\times pad}{stride} \\Bigr\\rfloor +1\\] \\[n_W = \\Bigl\\lfloor \\frac{n_{W_{prev}} - f + 2 \\times pad}{stride} \\Bigr\\rfloor +1\\] \\[n_C = \\text{número de filtros en la convolución}\\]\n\n\n\nLa implementación se realiza mediante bucles for.\n\n\nCode\ndef conv_forward(A_prev, W, b, hparameters):\n    \"\"\"\n    Implements the forward propagation for a convolution function\n    \n    Arguments:\n    A_prev -- output activations of the previous layer, \n        numpy array of shape (m, n_H_prev, n_W_prev, n_C_prev)\n    W -- Weights, numpy array of shape (f, f, n_C_prev, n_C)\n    b -- Biases, numpy array of shape (1, 1, 1, n_C)\n    hparameters -- python dictionary containing \"stride\" and \"pad\"\n        \n    Returns:\n    Z -- conv output, numpy array of shape (m, n_H, n_W, n_C)\n    cache -- cache of values needed for the conv_backward() function\n    \"\"\"\n    \n    # Retrieve dimensions from A_prev's shape (≈1 line)  \n    (m, n_H_prev, n_W_prev, n_C_prev) = A_prev.shape\n    \n    # Retrieve dimensions from W's shape (≈1 line)\n    (f, f, n_C_prev, n_C) = W.shape\n    \n    # Retrieve information from \"hparameters\" (≈2 lines)\n    stride = hparameters[\"stride\"]\n    pad = hparameters[\"pad\"]\n    \n    # Compute the dimensions of the CONV output volume using the formula given above. \n    # Hint: use int() to apply the 'floor' operation. (≈2 lines)\n    n_H = int((n_H_prev + 2*pad - f)/stride) + 1\n    n_W = int((n_W_prev + 2*pad - f)/stride) + 1\n    \n    # Initialize the output volume Z with zeros. (≈1 line)\n    Z = np.zeros((m, n_H, n_W, n_C))\n    \n    # Create A_prev_pad by padding A_prev\n    A_prev_pad = zero_pad(A_prev, pad)\n    \n    for i in range(m):               # loop over the batch of training examples\n        a_prev_pad = A_prev_pad[i]          # Select ith training example's padded activation\n        for h in range(n_H):           # loop over vertical axis of the output volume\n            # Find the vertical start and end of the current \"slice\" (≈2 lines)\n            vert_start = stride * h \n            vert_end = vert_start  + f\n            \n            for w in range(n_W):       # loop over horizontal axis of the output volume\n                # Find the horizontal start and end of the current \"slice\" (≈2 lines)\n                horiz_start = stride * w\n                horiz_end = horiz_start + f\n                \n                for c in range(n_C):   # loop over channels (= #filters) of the output volume\n                                        \n                    # Use the corners to define the (3D) slice of a_prev_pad (See Hint above the cell). (≈1 line)\n                    a_slice_prev = a_prev_pad[vert_start:vert_end,horiz_start:horiz_end,:]\n                    \n                    # Convolve the (3D) slice with the correct filter W and bias b, to get back one output neuron. (≈3 line)\n                    weights = W[:, :, :, c]\n                    biases  = b[:, :, :, c]\n                    Z[i, h, w, c] = conv_single_step(a_slice_prev, weights, biases)\n    \n    # Save information in \"cache\" for the backprop\n    cache = (A_prev, W, b, hparameters)\n    \n    return Z, cache\n\n\n\n\nCode\nnp.random.seed(1)\nA_prev = np.random.randn(2, 5, 7, 4)\nW = np.random.randn(3, 3, 4, 8)\nb = np.random.randn(1, 1, 1, 8)\nhparameters = {\"pad\" : 1,\n               \"stride\": 2}\n\nZ, cache_conv = conv_forward(A_prev, W, b, hparameters)\nprint(\"\\nZ's mean =\\t\", np.mean(Z))\nprint(\"\\nZ[0,2,1] =\\n\", Z[0, 2, 1])\nprint(\"\\ncache_conv[0][1][2][3] =\\n\", cache_conv[0][1][2][3])\n\n\n\nZ's mean =   0.5511276474566768\n\nZ[0,2,1] =\n [-2.17796037  8.07171329 -0.5772704   3.36286738  4.48113645 -2.89198428\n 10.99288867  3.03171932]\n\ncache_conv[0][1][2][3] =\n [-1.1191154   1.9560789  -0.3264995  -1.34267579]"
  },
  {
    "objectID": "Convolutional_Neural_Networks.html#forward-pooling",
    "href": "Convolutional_Neural_Networks.html#forward-pooling",
    "title": "1  Redes neuronales convolucionales: paso a paso",
    "section": "3.1 Forward Pooling",
    "text": "3.1 Forward Pooling\nEn la sección se implementarán tanto el MAX-POOL como el AVG-POOL dentro de la misma función.\n\n\n3.1.1 Exercise 4 - pool_forward\nReminder: Como aquí no hay padding, las fórmulas que relacionan la forma de salida del agrupamiento con la forma de entrada son las siguientes:\n\\[\\text{ancho de salida, } n_H = \\Bigl\\lfloor \\frac{n_{H_{prev}} - f}{stride} \\Bigr\\rfloor +1\\]\n\\[\\text{ancho de salida, }n_W = \\Bigl\\lfloor \\frac{n_{W_{prev}} - f}{stride} \\Bigr\\rfloor +1\\]\n\\[\\text{número de canales de salida, }n_C = n_{C_{prev}}\\]\n\n\nCode\ndef pool_forward(A_prev, hparameters, mode = \"max\"):\n    \"\"\"\n    Implements the forward pass of the pooling layer\n    \n    Arguments:\n    A_prev -- Input data, numpy array of shape (m, n_H_prev, n_W_prev, n_C_prev)\n    hparameters -- python dictionary containing \"f\" and \"stride\"\n    mode -- the pooling mode you would like to use, defined as a string (\"max\" or \"average\")\n    \n    Returns:\n    A -- output of the pool layer, a numpy array of shape (m, n_H, n_W, n_C)\n    cache -- cache used in the backward pass of the pooling layer, contains the input and hparameters \n    \"\"\"\n    \n    # Retrieve dimensions from the input shape\n    (m, n_H_prev, n_W_prev, n_C_prev) = A_prev.shape\n    \n    # Retrieve hyperparameters from \"hparameters\"\n    f = hparameters[\"f\"]\n    stride = hparameters[\"stride\"]\n    \n    # Define the dimensions of the output\n    n_H = int(1 + (n_H_prev - f) / stride)\n    n_W = int(1 + (n_W_prev - f) / stride)\n    n_C = n_C_prev\n    \n    # Initialize output matrix A\n    A = np.zeros((m, n_H, n_W, n_C))              \n    \n    ### START CODE HERE ###\n    for i in range(m):                         # loop over the training examples\n        a_prev_slice = A_prev[i]\n        for h in range(n_H):                     # loop on the vertical axis of the output volume\n            # Find the vertical start and end of the current \"slice\" (≈2 lines)\n            vert_start = stride * h \n            vert_end = vert_start + f\n            \n            for w in range(n_W):                 # loop on the horizontal axis of the output volume\n                # Find the vertical start and end of the current \"slice\" (≈2 lines)\n                horiz_start = stride * w\n                horiz_end = horiz_start + f\n                \n                for c in range (n_C):            # loop over the channels of the output volume\n                    \n                    # Use the corners to define the current slice on the ith training example of A_prev, channel c. (≈1 line)\n                    a_slice_prev = a_prev_slice[vert_start:vert_end,horiz_start:horiz_end,c]\n                    \n                    # Compute the pooling operation on the slice. \n                    # Use an if statement to differentiate the modes. \n                    # Use np.max and np.mean.\n                    if mode == \"max\":\n                        A[i, h, w, c] = np.max(a_slice_prev)\n                    elif mode == \"average\":\n                        A[i, h, w, c] = np.mean(a_slice_prev)\n                    else:\n                        print(mode+ \"-type pooling layer NOT Defined\")    \n    # YOUR CODE ENDS HERE\n    \n    # Store the input and hparameters in \"cache\" for pool_backward()\n    cache = (A_prev, hparameters)\n    \n    # Making sure your output shape is correct\n    assert(A.shape == (m, n_H, n_W, n_C))\n    \n    return A, cache\n\n\n\n\nCode\n# Case 1: stride of 1\nnp.random.seed(1)\n\nA_prev = np.random.randn(2, 5, 5, 3)\nhparameters = {\"stride\" : 1, \"f\": 3}\n\nA, cache = pool_forward(A_prev, hparameters, mode = \"max\")\nprint(\"Max pooling:\")\nprint(\"\\nA.shape = \" + str(A.shape))\nprint(\"A[1, 1] =\\n\", A[1, 1])\nprint()\nA, cache = pool_forward(A_prev, hparameters, mode = \"average\")\nprint(\"Average pooling:\")\nprint(\"\\nA.shape = \" + str(A.shape))\nprint(\"A[1, 1] =\\n\", A[1, 1])\n\n\nMax pooling:\n\nA.shape = (2, 3, 3, 3)\nA[1, 1] =\n [[1.96710175 0.84616065 1.27375593]\n [1.96710175 0.84616065 1.23616403]\n [1.62765075 1.12141771 1.2245077 ]]\n\nAverage pooling:\n\nA.shape = (2, 3, 3, 3)\nA[1, 1] =\n [[ 0.44497696 -0.00261695 -0.31040307]\n [ 0.50811474 -0.23493734 -0.23961183]\n [ 0.11872677  0.17255229 -0.22112197]]\n\n\n\n\nCode\n# Case 2: stride of 2\nnp.random.seed(1)\nA_prev = np.random.randn(2, 5, 5, 3)\nhparameters = {\"stride\" : 2, \"f\": 3}\n\nA, cache = pool_forward(A_prev, hparameters)\nprint(\"Max pooling:\")\nprint(\"\\nA.shape = \" + str(A.shape))\nprint(\"A[0] =\\n\", A[0])\nprint()\n\nA, cache = pool_forward(A_prev, hparameters, mode = \"average\")\nprint(\"Average pooling:\")\nprint(\"\\nA.shape = \" + str(A.shape))\nprint(\"A[1] =\\n\", A[1])\n\n\nMax pooling:\n\nA.shape = (2, 2, 2, 3)\nA[0] =\n [[[1.74481176 0.90159072 1.65980218]\n  [1.74481176 1.6924546  1.65980218]]\n\n [[1.13162939 1.51981682 2.18557541]\n  [1.13162939 1.6924546  2.18557541]]]\n\nAverage pooling:\n\nA.shape = (2, 2, 2, 3)\nA[1] =\n [[[-0.17313416  0.32377198 -0.34317572]\n  [ 0.02030094  0.14141479 -0.01231585]]\n\n [[ 0.42944926  0.08446996 -0.27290905]\n  [ 0.15077452  0.28911175  0.00123239]]]\n\n\nLecciones\n\nUna convolución extrae características de una imagen de entrada tomando el dot product entre los datos de entrada y un array 3D de pesos (el filtro).\nEl resultado 2D de la convolución se denomina feature map.\nUna capa de convolución es donde el filtro se desliza sobre la imagen y calcula el dot product.\n\nEsto transforma el volumen de entrada en un volumen de salida de tamaño diferente.\n\nEl zero-padding ayuda a conservar más información en los bordes de la imagen y es útil para construir redes más profundas, ya que se puede construir una capa CONV sin reducir la altura y el ancho de los volúmenes.\nLas pooling layers reducen gradualmente la altura y el ancho de la entrada deslizando una ventana 2D sobre cada región especificada, luego resumiendo las características en esa región."
  },
  {
    "objectID": "Convolutional_Neural_Networks.html#convolutional-layer-backward-pass",
    "href": "Convolutional_Neural_Networks.html#convolutional-layer-backward-pass",
    "title": "1  Redes neuronales convolucionales: paso a paso",
    "section": "4.1 Convolutional Layer Backward Pass",
    "text": "4.1 Convolutional Layer Backward Pass\nComencemos implementando el paso hacia atrás para una capa CONV.\n\n\n4.1.1 Cálculo de \\(dA\\):\nThis is the formula for computing \\(dA\\) with respect to the cost for a certain filter \\(W_c\\) and a given training example:\n\\[dA \\mathrel{+}= \\sum _{h=0} ^{n_H} \\sum_{w=0} ^{n_W} W_c \\times dZ_{hw} \\tag{1}\\]\nDonde \\(W_c\\) es un filtro y \\(dZ_{hw}\\) un escalar correspondiente al gradiente del loss con respecto a la salida de la capa convolucional \\(Z\\) en la fila \\(h\\) y columna \\(w\\) (correspondiente al dot-product tomado en el desplazamiento \\(i\\) hacia la izquierda y el desplazamiento \\(j\\) hacia abajo). Notese que en cada momento, se multiplica el mismo filtro \\(W_c\\) por un \\(dZ\\) diferente al actualizar \\(dA\\). Esto se debe pricipalmente a que cuanto se calcula el forward pass, cada filtro realiza el dot-product y es sumado por un \\(a_{slice}\\) distinto. Por lo tanto, al calcular el backpropagation para \\(dA\\), simplemente se estan sumando los gradientes de todos los \\(a_{slices}\\).\nEn código, dentro de los bucles for apropiados, esta fórmula se traduce en:\nda_prev_pad[vert_start:vert_end, horiz_start:horiz_end, :] += W[:,:,:,c] * dZ[i, h, w, c]\n\n\n\n4.1.2 Cálculo de \\(dW\\):\nEsta es la fórmula para calcular \\(dW_c\\) (donde \\(dW_c\\) es la derivada de un filtro) con respecto al loss:\n\\[dW_c  \\mathrel{+}= \\sum _{h=0} ^{n_H} \\sum_{w=0} ^ {n_W} a_{slice} \\times dZ_{hw}  \\tag{2}\\]\nDonde \\(a_{slice}\\) corresponde a la porción que se utilizó para generar la activación \\(Z_{ij}\\). Por lo tanto, esto nos da el gradiente para \\(W\\)con respecto a esa porción. Dado que es el mismo \\(W\\), simplemente se sumarán todos esos grandientes para obtener \\(dW\\).\nEn código, dentro de los bucles for apropiados, esta fórmula se traduce en:\ndW[:,:,:,c] += a_slice * dZ[i, h, w, c]\n\n\n\n4.1.3 Cálculo de \\(db\\):\nEsta es la fórmula para calcular \\(db\\) con respecto al costo para un cierto filtro \\(W_c\\):\n\\[db = \\sum_h \\sum_w dZ_{hw} \\tag{3}\\] Al igual que en el caso de las redes básicas, \\(db\\) se calcula sumando \\(dZ\\). En este caso, simplemente se están sumando todos los gradientes de la salida convolucional (\\(Z\\)) con respecto al loss.\nEn código, dentro de los bucles for apropiados, esta fórmula se traduce en:\ndb[:,:,:,c] += dZ[i, h, w, c]\n\n\n\n4.1.4 Exercise 5 - conv_backward\nA continuación, se implementa la función conv_backward. You should sum over all the training examples, filters, heights, and widths. You should then compute the derivatives using formulas 1, 2 and 3 above.\n\n\nCode\ndef conv_backward(dZ, cache):\n    \"\"\"\n    Implement the backward propagation for a convolution function\n    \n    Arguments:\n    dZ -- gradient of the cost with respect to the output of the conv layer (Z), numpy array of shape (m, n_H, n_W, n_C)\n    cache -- cache of values needed for the conv_backward(), output of conv_forward()\n    \n    Returns:\n    dA_prev -- gradient of the cost with respect to the input of the conv layer (A_prev),\n               numpy array of shape (m, n_H_prev, n_W_prev, n_C_prev)\n    dW -- gradient of the cost with respect to the weights of the conv layer (W)\n          numpy array of shape (f, f, n_C_prev, n_C)\n    db -- gradient of the cost with respect to the biases of the conv layer (b)\n          numpy array of shape (1, 1, 1, n_C)\n    \"\"\"    \n    \n        \n    # Retrieve information from \"cache\"\n    (A_prev, W, b, hparameters) = cache\n    # Retrieve dimensions from A_prev's shape\n    (m, n_H_prev, n_W_prev, n_C_prev) = A_prev.shape\n    # Retrieve dimensions from W's shape\n    (f, f, n_C_prev, n_C) = W.shape\n    \n    # Retrieve information from \"hparameters\"\n    stride = hparameters[\"stride\"]\n    pad = hparameters[\"pad\"]\n    \n    # Retrieve dimensions from dZ's shape\n    (m, n_H, n_W, n_C) = dZ.shape\n    \n    # Initialize dA_prev, dW, db with the correct shapes\n    dA_prev = np.zeros(A_prev.shape)                          \n    dW = np.zeros(W.shape)\n    db = np.zeros(b.shape) # b.shape = [1,1,1,n_C]\n    \n    # Pad A_prev and dA_prev\n    A_prev_pad = zero_pad(A_prev, pad)\n    dA_prev_pad = zero_pad(dA_prev, pad)\n    \n    for i in range(m):                       # loop over the training examples\n        \n        # select ith training example from A_prev_pad and dA_prev_pad\n        a_prev_pad = A_prev_pad[i]\n        da_prev_pad = dA_prev_pad[i]\n        \n        for h in range(n_H):                   # loop over vertical axis of the output volume\n            for w in range(n_W):               # loop over horizontal axis of the output volume\n                for c in range(n_C):           # loop over the channels of the output volume\n                    \n                    # Find the corners of the current \"slice\"\n                    vert_start = stride * h \n                    vert_end = vert_start + f\n                    horiz_start = stride * w\n                    horiz_end = horiz_start + f\n\n                    # Use the corners to define the slice from a_prev_pad\n                    a_slice = a_prev_pad[vert_start:vert_end,horiz_start:horiz_end,:]\n\n                    # Update gradients for the window and the filter's parameters using the code formulas given above\n                    da_prev_pad[vert_start:vert_end, horiz_start:horiz_end, :] += W[:,:,:,c] * dZ[i, h, w, c]\n                    dW[:,:,:,c] += a_slice * dZ[i, h, w, c]\n                    db[:,:,:,c] += dZ[i, h, w, c]\n                    \n        # Set the ith training example's dA_prev to the unpadded da_prev_pad (Hint: use X[pad:-pad, pad:-pad, :])\n        dA_prev[i, :, :, :] = da_prev_pad[pad:-pad, pad:-pad, :]\n    \n    # Making sure your output shape is correct\n    assert(dA_prev.shape == (m, n_H_prev, n_W_prev, n_C_prev))\n    \n    return dA_prev, dW, db\n\n\n\n\nCode\n# We'll run conv_forward to initialize the 'Z' and 'cache_conv\",\n# which we'll use to test the conv_backward function\nnp.random.seed(1)\n\nA_prev = np.random.randn(10, 4, 4, 3)\nW = np.random.randn(2, 2, 3, 8)\nb = np.random.randn(1, 1, 1, 8)\nhparameters = {\"pad\" : 2,\n               \"stride\": 2}\nZ, cache_conv = conv_forward(A_prev, W, b, hparameters)\n\n# Test conv_backward\ndA, dW, db = conv_backward(Z, cache_conv)\n\nprint(\"dA_mean =\", np.mean(dA))\nprint(\"dW_mean =\", np.mean(dW))\nprint(\"db_mean =\", np.mean(db))\n\n\ndA_mean = 1.4524377775388075\ndW_mean = 1.7269914583139097\ndb_mean = 7.839232564616838"
  },
  {
    "objectID": "Convolutional_Neural_Networks.html#pooling-layer---backward-pass",
    "href": "Convolutional_Neural_Networks.html#pooling-layer---backward-pass",
    "title": "1  Redes neuronales convolucionales: paso a paso",
    "section": "4.2 Pooling Layer - Backward Pass",
    "text": "4.2 Pooling Layer - Backward Pass\nA continuación, se implementará el backward pass para la pooling layer, empezando por la capa MAX-POOL. Aunque una capa pooling no tiene parámetros que actualizar en la fase de retropropagación, aún es necesario retropropagar el gradiente a través de la la pooling layer para calcular los gradientes de las capas que precedieron a la capa de pooling.\n\n\n4.2.1 Max Pooling - Backward Pass\nAntes de saltar directamente al backpropagation de la capa de pooling, se va a contruir la función de ayuda create_mask_from_window(), que hace lo siguiente:\n\\[ X = \\begin{bmatrix}\n1 && 3 \\\\\n4 && 2\n\\end{bmatrix} \\quad \\rightarrow  \\quad M =\\begin{bmatrix}\n0 && 0 \\\\\n1 && 0\n\\end{bmatrix}\\tag{4}\\]\nLa función create_mask_from_window() genera una matriz “máscara” que identifica la ubicación del valor máximo dentro de una matriz. Un True (1) en la máscara indica la posición del máximo en la matriz X, mientras que todas las demás entradas son False (0). El average pooling durante la retropropagación opera de manera similar, aunque con una máscara distinta.\n\n\n\n4.2.2 Exercise 6 - create_mask_from_window\nSe implementa la función create_mask_from_window(). Esta función será de ayuda durante el pooling de la retropropagación.\n\n\nCode\ndef create_mask_from_window(x):\n    \"\"\"\n    Creates a mask from an input matrix x, to identify the max entry of x.\n    \n    Arguments:\n    x -- Array of shape (f, f)\n    \n    Returns:\n    mask -- Array of the same shape as window, contains a True at the position corresponding to the max entry of x.\n    \"\"\"    \n\n    mask = (x == np.max(x))\n    \n    return mask\n\n\n\n\nCode\nnp.random.seed(1)\n\nx = np.random.randn(2, 3)\nmask = create_mask_from_window(x)\nprint('x = \\n', x)\nprint(\"mask = \\n\", mask)\n\nx = np.array([[-1, 2, 3],\n              [2, -3, 2],\n              [1, 5, -2]])\n\ny = np.array([[False, False, False],\n     [False, False, False],\n     [False, True, False]])\n\nmask = create_mask_from_window(x)\n\n\nx = \n [[ 1.62434536 -0.61175641 -0.52817175]\n [-1.07296862  0.86540763 -2.3015387 ]]\nmask = \n [[ True False False]\n [False False False]]\n\n\nSe realiza el seguimiento de la posición del valor máximo porque es este valor de entrada el que finalmente influye en el resultado y, por tanto, en el costo. El proceso de retropropagación calcula los gradientes con respecto al costo, por lo que cualquier elemento que influya en el costo final debe tener un gradiente no nulo. Por tanto, la retropropagación “propagará” el gradiente de vuelta al valor de entrada específico que influyó en el costo.\n\n\n\n4.2.3 Average Pooling - Backward Pass\nEn el max pooling, para cada ventana de entrada, toda la “influencia” en el resultado proviene de un único valor de entrada: el máximo. En el average pooling, cada elemento de la ventana de entrada tiene la misma influencia en el resultado. Por lo tanto, para implementar la retropropagación, ahora se implementará una función auxiliar que refleje esto.\nPor ejemplo, si se realizó un average pooling en el forward pass utilizando un filtro de 2x2, entonces la máscara que se utilizará para la retropropagación será así: \\[ dZ = 1 \\quad \\rightarrow  \\quad dZ =\\begin{bmatrix}\n1/4 && 1/4 \\\\\n1/4 && 1/4\n\\end{bmatrix}\\tag{5}\\]\nEsto implica que cada posición en la matriz \\(dZ\\) contribuye de manera igual al resultado porque, en el forward pass, se toma un promedio.\n\n\n\n4.2.4 Exercise 7 - distribute_value\nA continuación se implementa la función distribute_value para distribuir equitativamente un valor dz a través de una matriz de dimensión shape.\n\n\nCode\ndef distribute_value(dz, shape):\n    \"\"\"\n    Distributes the input value in the matrix of dimension shape\n    \n    Arguments:\n    dz -- input scalar\n    shape -- the shape (n_H, n_W) of the output matrix for which we want to distribute the value of dz\n    \n    Returns:\n    a -- Array of size (n_H, n_W) for which we distributed the value of dz\n    \"\"\"    \n    # Retrieve dimensions from shape (≈1 line)\n    (n_H, n_W) = shape\n    \n    # Compute the value to distribute on the matrix (≈1 line)\n    average = np.prod(shape)\n    \n    # Create a matrix where every entry is the \"average\" value (≈1 line)\n    a = (dz/average)*np.ones(shape)\n\n    return a\n\n\n\n\nCode\na = distribute_value(2, (2, 2))\nprint('distributed value =\\n', a)\n\n\ndistributed value =\n [[0.5 0.5]\n [0.5 0.5]]\n\n\n\n\n\n4.2.5 Putting it Together: Pooling Backward\nAhora se dispoonen de todos los elementos para calcular el back propagation en una pooling layer.\n\n\n\n4.2.6 Exercise 8 - pool_backward\nSe implementa la función pool_backward en ambos modos (\"max\" and \"average\"). Nuevamente, se utilizan 4 bucles for (iterando sobre los ejemplos de entrenamiento, altura, anchura y canales). Se emprea un if/elif para verificar si el modo es igual a 'max' o 'average'. Si es igual a ‘average’ se usa la función distribute_value() implementada anteriormente para crear una matriz de la misma dimensión que a_slice. De lo contrario, si el mdoo es igual a ‘max’, se crea una máscara con create_mask_from_window() y se multiplica por el valor correspondiente de \\(dA\\).\n\n\nCode\ndef pool_backward(dA, cache, mode = \"max\"):\n    \"\"\"\n    Implements the backward pass of the pooling layer\n    \n    Arguments:\n    dA -- gradient of cost with respect to the output of the pooling layer, same shape as A\n    cache -- cache output from the forward pass of the pooling layer, contains the layer's input and hparameters \n    mode -- the pooling mode you would like to use, defined as a string (\"max\" or \"average\")\n    \n    Returns:\n    dA_prev -- gradient of cost with respect to the input of the pooling layer, same shape as A_prev\n    \"\"\"\n    # Retrieve information from cache (≈1 line)\n    (A_prev, hparameters) = cache\n    \n    # Retrieve hyperparameters from \"hparameters\" (≈2 lines)\n    stride = hparameters[\"stride\"]\n    f = hparameters[\"f\"]\n    \n    # Retrieve dimensions from A_prev's shape and dA's shape (≈2 lines)\n    m, n_H_prev, n_W_prev, n_C_prev = A_prev.shape\n    m, n_H, n_W, n_C = dA.shape\n    \n    # Initialize dA_prev with zeros (≈1 line)\n    dA_prev = np.zeros(A_prev.shape)\n    \n    for i in range(m): # loop over the training examples\n        \n        # select training example from A_prev (≈1 line)\n        a_prev = A_prev[i,:,:,:]\n        \n        for h in range(n_H):                   # loop on the vertical axis\n            for w in range(n_W):               # loop on the horizontal axis\n                for c in range(n_C):           # loop over the channels (depth)\n        \n                    # Find the corners of the current \"slice\" (≈4 lines)\n                    vert_start  = h * stride\n                    vert_end    = h * stride + f\n                    horiz_start = w * stride\n                    horiz_end   = w * stride + f\n                    \n                    # Compute the backward propagation in both modes.\n                    if mode == \"max\":\n                        \n                        # Use the corners and \"c\" to define the current slice from a_prev (≈1 line)\n                        a_prev_slice = a_prev[ vert_start:vert_end, horiz_start:horiz_end, c ]\n                        \n                        # Create the mask from a_prev_slice (≈1 line)\n                        mask = create_mask_from_window( a_prev_slice )\n\n                        # Set dA_prev to be dA_prev + (the mask multiplied by the correct entry of dA) (≈1 line)\n                        dA_prev[i, vert_start:vert_end, horiz_start:horiz_end, c] += mask * dA[i, h, w, c]\n                        \n                    elif mode == \"average\":\n                        \n                        # Get the value da from dA (≈2 line)\n                        da = dA[i, h, w, c]\n                        \n                        # Define the shape of the filter as fxf (≈1 line)\n                        shape = (f,f)\n\n                        # Distribute it to get the correct slice of dA_prev. i.e. Add the distributed value of da. (≈1 line)\n                        dA_prev[i, vert_start: vert_end, horiz_start: horiz_end, c] += distribute_value(da, shape)\n    \n    # Making sure your output shape is correct\n    assert(dA_prev.shape == A_prev.shape)\n    \n    return dA_prev"
  }
]